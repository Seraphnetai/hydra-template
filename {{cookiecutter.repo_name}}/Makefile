IMAGE_TAG=latest
IMAGE_NAME=seraphnet/hydra/{{cookiecutter.repo_name}}:latest
CONTAINER_NAME={{cookiecutter.repo_name}}-${USER}


build-image: # build docker image
	docker buildx build -t ${IMAGE_NAME} .

test-local: # run all test locally using poetry
	poetry run pytest

test-docker: # run all tests in container
	$(MAKE) run-command-docker c=pytest

# Usage: make run-command-docker c=command
# Example: make run-command-docker c=/bin/bash
run-command-docker: # run given command in docker container
	docker run --name ${CONTAINER_NAME} -it --rm ${IMAGE_NAME} $(c)

run-bash-docker: # run bash in container and attach tty 
	docker run --name ${CONTAINER_NAME} -it --rm ${IMAGE_NAME} /bin/bash

run-module-local: # run module loccally using poetry
	poetry run python {{cookiecutter.repo_name}}/__main__.py

run-module-docker-dev: # run module in container, binding current repo state as volume
	docker run --name ${CONTAINER_NAME} -it --rm -v  $(shell pwd):/code ${IMAGE_NAME} python {{cookiecutter.repo_name}}/__main__.py

run-module-docker: # run module in container
	docker run --name ${CONTAINER_NAME} -it --rm ${IMAGE_NAME} python {{cookiecutter.repo_name}}/__main__.py

clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".mypy_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

clean-outputs: ## Clean hydra outputs
	rm -rf outputs
